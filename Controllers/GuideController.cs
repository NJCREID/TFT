using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using TFT_API.Interfaces;
using TFT_API.Models.UserGuides;
using TFT_API.Models.AutoGeneratedGuide;
using System.Security.Claims;
using TFT_API.Filters;

namespace TFT_API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [ValidateRequestBody]
    public class GuideController(IGuideDataAccess userGuideRepo, IMapper mapper, IUserDataAccess userRepo) : ControllerBase
    {
        private readonly IGuideDataAccess _userGuideRepo = userGuideRepo;
        private readonly IMapper _mapper = mapper;
        private readonly IUserDataAccess _userRepo = userRepo;

        /// <summary>
        /// Retrieves a list of user guides filtered by type and optional user ID.
        /// </summary>
        /// <param name="type">The type of guides to retrieve</param>
        /// <param name="userId">Optional user ID to filter guides based on user votes</param>
        /// <returns>A list of user guides</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/type/tutorial/123
        /// 
        /// </remarks>
        /// <response code="200">Returns a list of user guides</response>
        /// <response code="404">If no guides are found</response>
        [AllowAnonymous]
        [HttpGet("type/{type}/{userId?}")]
        public async Task<ActionResult<List<FeedUserGuideDto>>> GetUserGuides(
            [FromRoute] string type,
            [FromRoute] int? userId)
        {
            var userGuides = await _userGuideRepo.GetUserGuidesAsync(type);
            if (userGuides == null || userGuides.Count == 0)
                return NotFound($"No guides found");
            if (userId.HasValue && userId > 0)
            {
                await AddUserVotes(userGuides, userId.Value);
            }
            return Ok(userGuides);
        }

        /// <summary>
        /// Retrieves a list of user guides created by the authenticated user.
        /// </summary>
        /// <returns>A list of user guides for the authenticated user</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/user
        /// 
        /// </remarks>
        /// <response code="200">Returns a list of user guides</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="404">If no guides are found</response>
        [Authorize]
        [HttpGet("user")]
        public async Task<ActionResult<List<FeedUserGuideDto>>> GetUserGuidesByUserId()
        {
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId)) 
                return Unauthorized("Invalid User ID.");
            var userGuides = await  _userGuideRepo.GetUserGuidesByUserIdAsync(userId);
            if (userGuides == null || userGuides.Count == 0)
                return NotFound($"No guides found with User ID.");
            await AddUserVotes(userGuides, userId);
            return Ok(userGuides);
        }

        /// <summary>
        /// Retrieves a list of user guides commented on by the authenticated user.
        /// </summary>
        /// <returns>A list of commented user guides</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/commented
        /// 
        /// </remarks>
        /// <response code="200">Returns a list of commented user guides</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="404">If no commented guides are found</response>
        [Authorize]
        [HttpGet("commented")]
        public async Task<ActionResult<List<FeedUserGuideDto>>> GetCommentedUserGuides()
        {
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId)) 
                return Unauthorized("Invalid User ID.");
            var userGuides = await _userGuideRepo.GetCommentedUserGuidesAsync(userId);
            if (userGuides == null || userGuides.Count == 0)
                return NotFound($"No commented guides found with User ID.");
            await AddUserVotes(userGuides, userId);
            return Ok(userGuides);
        }

        /// <summary>
        /// Retrieves a list of user guides upvoted by the authenticated user.
        /// </summary>
        /// <returns>A list of upvoted user guides</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/upvoted
        /// 
        /// </remarks>
        /// <response code="200">Returns a list of upvoted user guides</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="404">If no upvoted guides are found</response>
        [Authorize]
        [HttpGet("upvoted")]
        public async Task<ActionResult<List<FeedUserGuideDto>>> GetUpvotedUserGuides()
        {
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId)) 
                return Unauthorized("Invalid User ID.");
            var userGuides = await _userGuideRepo.GetUpvotedUserGuidesAsync(userId);
            if (userGuides == null || userGuides.Count == 0)
                return NotFound($"No upvoted guides found with User ID.");
            await AddUserVotes(userGuides, userId);
            return Ok(userGuides);
        }

        /// <summary>
        /// Retrieves a list of user guides downvoted by the authenticated user.
        /// </summary>
        /// <returns>A list of downvoted user guides</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/downvoted
        /// 
        /// </remarks>
        /// <response code="200">Returns a list of downvoted user guides</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="404">If no downvoted guides are found</response>
        [Authorize]
        [HttpGet("downvoted")]
        public async Task<ActionResult<List<FeedUserGuideDto>>> GetDownvotedUserGuides()
        {
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId)) 
                return Unauthorized("Invalid User ID.");
            var userGuides = await _userGuideRepo.GetDownvotedUserGuidesAsync(userId);
            if (userGuides == null || userGuides.Count == 0)
                return NotFound($"No downvoted guides found with User ID.");
            await AddUserVotes(userGuides, userId);
            return Ok(userGuides);
        }

        /// <summary>
        /// Retrieves a user guide by its ID.
        /// </summary>
        /// <param name="id">The ID of the user guide</param>
        /// <returns>The user guide with the specified ID</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/1
        /// 
        /// </remarks>
        /// <response code="200">Returns the user guide with the specified ID</response>
        /// <response code="404">If the user guide with the specified ID is not found</response>
        [AllowAnonymous]
        [HttpGet("{id}", Name = "GetUserGuide")]
        public async Task<ActionResult<UserGuideDto>> GetUserGuideById([FromRoute] int id)
        {
            var userGuide = await _userGuideRepo.GetUserGuideByIdAsync(id);
            if (userGuide == null) return NotFound($"User guide with ID {id} not found.");
            return Ok(userGuide);
        }

        /// <summary>
        /// Adds a new user guide.
        /// </summary>
        /// <param name="request">The request containing user guide details</param>
        /// <returns>The created user guide</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// POST /api/guide
        /// 
        /// </remarks>
        /// <response code="201">Returns the created user guide</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="404">If the user or guide is not found</response>
        /// <response code="400">If the request is invalid</response>
        [Authorize]
        [HttpPost]
        public async Task<ActionResult<UserGuideDto>> AddUserGuide([FromBody] UserGuideRequest request)
        {
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId))
                return Unauthorized("Invalid User ID.");
            var user = await _userRepo.GetUserByIdAsync(userId);
            if (user == null) return NotFound("User was not found.");
            var newUserGuide = _mapper.Map<UserGuide>(request);
            newUserGuide.UsersUsername = user.Username;
            newUserGuide.UserId = userId;
            newUserGuide.CreatedAt = DateTime.Now;
            newUserGuide.UpdatedAt = DateTime.Now;

            if (string.IsNullOrEmpty(newUserGuide.Stage2Desc) ||
                string.IsNullOrEmpty(newUserGuide.Stage3Desc) ||
                string.IsNullOrEmpty(newUserGuide.Stage4Desc) ||
                string.IsNullOrEmpty(newUserGuide.GeneralDesc) ||
                string.IsNullOrEmpty(newUserGuide.DifficultyLevel) ||
                string.IsNullOrEmpty(newUserGuide.PlayStyle))
            {
                newUserGuide.IsDraft = true;
            }

            var userGuideDto = await _userGuideRepo.AddUserGuideAsync(newUserGuide);

            user.GuidesCount++;
            await _userRepo.UpdateUserAsync(user);

            return CreatedAtRoute("GetUserGuide", new { id = userGuideDto.Id }, userGuideDto);
        }

        /// <summary>
        /// Updates an existing user guide.
        /// </summary>
        /// <param name="userGuide">The user guide details to update</param>
        /// <returns>The updated user guide</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// PUT /api/guide
        /// 
        /// </remarks>
        /// <response code="200">Returns the updated user guide</response>
        /// <response code="401">If the user is not authenticated or not authorized</response>
        /// <response code="404">If the user guide is not found</response>
        /// <response code="400">If the request fails to modify the user guide or the request is invalid</response>
        /// <response code="403">If the user is not authorized to update the guide</response>
        [Authorize]
        [HttpPut]
        public async Task<ActionResult<UserGuideDto>> UpdateUserGuide([FromBody] UserGuideDto userGuide)
        {
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId))
                return Unauthorized("Invalid User ID.");
            // Checks if the user ID on the claim matches the userguides user id.
            if (userId != userGuide.UserId)
                return Forbid("Not authorized to update this guide.");
            var currentUserGuide = await _userGuideRepo.GetFullUserGuideByIdAsync(userGuide.Id);
            if (currentUserGuide == null)
                return NotFound($"User guide with ID {userGuide.Id} not found.");
            try
            {
                currentUserGuide = _mapper.Map(userGuide, currentUserGuide);
                currentUserGuide.UpdatedAt = DateTime.Now;
                var userGuideDto = await _userGuideRepo.UpdateUserGuideAsync(currentUserGuide);
                return Ok(userGuideDto);
            }catch (Exception ex)
            {
                return StatusCode(500, "Failed to modify the user guide. Error: " + ex.Message);
            }
        }

        /// <summary>
        /// Deletes a user guide by its ID.
        /// </summary>
        /// <param name="id">The ID of the user guide to delete</param>
        /// <returns>No content if the deletion is successful</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// DELETE /api/guide/1
        /// 
        /// </remarks>
        /// <response code="204">No content if the deletion is successful</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="404">If the user guide with the specified ID is not found</response>
        /// <response code="403">If the user is not authorized to delete the guide</response>
        [Authorize]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUserGuide([FromRoute] int id)
        {
            
            if (!int.TryParse(User.FindFirstValue("UserId"), out int userId))
                return Unauthorized("Invalid User ID.");
            var userGuide = await _userGuideRepo.GetFullUserGuideByIdAsync(id);
            if (userGuide == null)
                return NotFound($"User guide with ID {id} not found.");
            // Checks if the user ID on the claim matches the userguides user id.
            if (userId != userGuide.UserId)
                return Forbid("Not authorized to delete this guide.");
            await _userGuideRepo.DeleteUserGuideAsync(id);
            return NoContent();
        }

        /// <summary>
        /// Retrieves a list of auto-generated guides.
        /// </summary>
        /// <param name="userId">Optional user ID to filter guides based on user votes</param>
        /// <returns>A list of auto-generated guides</returns>
        /// <remarks>
        /// Sample request:
        ///
        /// GET /api/guide/autogenerated
        /// 
        /// </remarks>
        /// <response code="200">Returns a list of auto-generated guides</response>
        /// <response code="404">If no auto-generated guides are found</response>
        [AllowAnonymous]
        [HttpGet("autogenerated/{userId?}")]
        public async Task<ActionResult<List<AutoGeneratedGuideDto>>> GetAutoGeneratedGuides([FromRoute] int? userId)
        {
            var autoGeneratedGuides = await _userGuideRepo.GetAutoGeneratedGuidesAsync();
            if (autoGeneratedGuides == null || autoGeneratedGuides.Count == 0)
                return NotFound("No auto-generated guides found.");
            if (userId.HasValue && userId > 0)
            {
                await AddUserVotes(autoGeneratedGuides, userId.Value);
            }
            return Ok(autoGeneratedGuides);
        }

        // Adds the current users vote status for each guide
        private async Task AddUserVotes<T>(List<T> guides, int userId) where T : IGuideDto
        {
            var userVotes = await _userGuideRepo.GetUserVotesAsync(userId);

            foreach (var guide in guides)
            {
                if (userVotes.TryGetValue(guide.Id, out bool value))
                {
                    guide.IsUpvote = value;
                }
                else
                {
                    guide.IsUpvote = null;
                }
            }
        }
    }   
}
