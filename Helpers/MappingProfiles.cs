using AutoMapper;
using TFT_API.Models.Unit;
using TFT_API.Models.Item;
using TFT_API.Models.User;
using TFT_API.Models.Trait;
using TFT_API.Models.UserGuides;
using TFT_API.Models.Votes;
using TFT_API.Models.Augments;
using TFT_API.Models.Stats;
using TFT_API.Models.AutoGeneratedGuide;
using TFT_API.Models.Stats.AugmentStats;
using TFT_API.Models.Stats.ItemStats;
using TFT_API.Models.Stats.TraitStats;
using TFT_API.Models.Stats.UnitStats;
using TFT_API.Models.Stats.CompStats;

namespace TFT_API.Helper
{
    public class MappingProfiles : Profile
    {
        public MappingProfiles()
        {
            CreateMap<UserLoginRequest, PersistedUser>();
            CreateMap<AddUserRequest, PersistedUser>();
            CreateMap<PersistedUser, UserDto>();
            CreateMap<PersistedUser, PartialUserDto>();
            CreateMap<PersistedUnit, UnitDto>()
                .ForMember(dest => dest.Traits, opt => opt.MapFrom(src => src.Traits));
            CreateMap<UnitRequest, PersistedUnit>()
                .ForMember(dest => dest.Traits, opt => opt.MapFrom<TraitResolver>());
            CreateMap<PersistedUnit, PartialUnitDto>()
                .ForMember(dest => dest.Traits, opt => opt.MapFrom(src => src.Traits));
            CreateMap<PersistedItem, ItemDto>();
            CreateMap<PersistedItem, PartialItemDto>();
            CreateMap<PersistedTrait, TraitDto>();
            CreateMap<PersistedTrait, PartialTraitDto>();
            CreateMap<UnitTrait, TraitDto>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Trait.Name))
                .ForMember(dest => dest.Key, opt => opt.MapFrom(src => src.Trait.Key))
                .ForMember(dest => dest.TierString, opt => opt.MapFrom(src => src.Trait.TierString))
                .ForMember(dest => dest.ImageUrl, opt => opt.MapFrom(src => src.Trait.ImageUrl))
                .ForMember(dest => dest.Desc, opt => opt.MapFrom(src => src.Trait.Desc))
                .ForMember(dest => dest.Tiers, opt => opt.MapFrom(src => src.Trait.Tiers));
            CreateMap<UnitTrait, PartialTraitDto>()
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Trait.Name))
                .ForMember(dest => dest.Key, opt => opt.MapFrom(src => src.Trait.Key))
                .ForMember(dest => dest.TierString, opt => opt.MapFrom(src => src.Trait.TierString))
                .ForMember(dest => dest.ImageUrl, opt => opt.MapFrom(src => src.Trait.ImageUrl));
            CreateMap<UserGuide, UserGuideDto>();   
            CreateMap<UserGuide, AutoGeneratedGuideDto>();
            CreateMap<UserGuideRequest, UserGuide>()
                .ForMember(dest => dest.Traits, opt => opt.MapFrom<UserGuideResolver>())
                .ForMember(dest => dest.Hexes, opt => opt.MapFrom<HexResolver>())
                .ForMember(dest => dest.Augments, opt => opt.MapFrom<AugmentResolver>());
            CreateMap<GuideTrait, GuideTraitDto>();
            CreateMap<VoteRequest, Vote>();
            CreateMap<Vote, VoteDto>();
            CreateMap<Comment, CommentDto>();
            CreateMap<CommentRequest, Comment>();
            CreateMap<Hex, HexDto>()
                .ForMember(dest => dest.CurrentItems, opt => opt.MapFrom(src => src.CurrentItems));
            CreateMap<HexItem, PartialItemDto>()
                .ForMember(dest => dest.Key, opt => opt.MapFrom(src => src.Item.Key))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Item.Name))
                .ForMember(dest => dest.ImageUrl, opt => opt.MapFrom(src => src.Item.ImageUrl))
                .ForMember(dest => dest.Tags, opt => opt.MapFrom(src => src.Item.Tags))
                .ForMember(dest => dest.Recipe, opt => opt.MapFrom(src => src.Item.Recipe))
                .ForMember(dest => dest.Desc, opt => opt.MapFrom(src => src.Item.Desc))
                .ForMember(dest => dest.AffectedTraitKey, opt => opt.MapFrom(src => src.Item.AffectedTraitKey))
                .ForMember(dest => dest.IsComponent, opt => opt.MapFrom(src => src.Item.IsComponent));
            CreateMap<GuideAugment, AugmentDto>()
                .ForMember(dest => dest.Key, opt => opt.MapFrom(src => src.Augment.Key))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Augment.Name))
                .ForMember(dest => dest.Desc, opt => opt.MapFrom(src => src.Augment.Desc))
                .ForMember(dest => dest.ImageUrl, opt => opt.MapFrom(src => src.Augment.ImageUrl))
                .ForMember(dest => dest.Tier, opt => opt.MapFrom(src => src.Augment.Tier));
            CreateMap<CompStatUnit, CompStatUnitDto>()
                .ForMember(dest => dest.InGameKey, opt => opt.MapFrom(src => src.Unit.InGameKey))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Unit.Name))
                .ForMember(dest => dest.ImageUrl, opt => opt.MapFrom(src => src.Unit.ImageUrl))
                .ForMember(dest => dest.Tier, opt => opt.MapFrom(src => src.Unit.Tier));
            CreateMap<PersistedAugment, AugmentDto>();
            CreateMap<CompStat, CompStatDto>();
            CreateMap<BaseCompStat, BaseCompStatDto>();
            CreateMap<AugmentStat, AugmentStatDto>();
            CreateMap<BaseAugmentStat, BaseAugmentStatDto>();
            CreateMap<ItemStat, ItemStatDto>();
            CreateMap<BaseItemStat, BaseItemStatDto>();
            CreateMap<TraitStat, TraitStatDto>();
            CreateMap<BaseTraitStat, BaseTraitStatDto>();
            CreateMap<UnitStat, UnitStatDto>();
            CreateMap<StarredUnitStat, StarredUnitStatDto>();
            CreateMap<BaseUnitStat, BaseUnitStatDto>();
            CreateMap<Stat, StatDto>();
        }
    }
}
