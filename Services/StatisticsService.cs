using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using TFT_API.Data;
using TFT_API.Models.Match;
using TFT_API.Models.Stats;
using TFT_API.Models.Stats.AugmentStats;
using TFT_API.Models.Stats.CompStats;
using TFT_API.Models.Stats.ItemStats;
using TFT_API.Models.Stats.TraitStats;
using TFT_API.Models.Stats.UnitStats;
using TFT_API.Models.UserGuides;

namespace TFT_API.Services
{
    public class StatisticsService(TFTContext context, IMemoryCache memoryCache)
    {
        private readonly TFTContext _context = context;
        private readonly IMemoryCache _memoryCache = memoryCache;

        public async Task CalculateAndStoreStatisticsAsync()
        {
            var leagues = new[] { "Challenger", "GrandMaster", "Master", "" };

            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var statsToRemove = await _context.AugmentStats.SelectMany(a => a.Stats)
                    .Concat(_context.UnitStats.Select(a => a.Stat))
                    .Concat(_context.ItemStats.Select(a => a.Stat))
                    .Concat(_context.TraitStats.Select(a => a.Stat))
                    .Concat(_context.StarredUnitStats.Select(a => a.Stat))
                    .Concat(_context.CompStats.Select(a => a.Stat))
                    .Distinct()
                    .ToListAsync();

                _context.Stats.RemoveRange(statsToRemove);
                await _context.SaveChangesAsync();

                foreach (var league in leagues)
                {
                    await ProcessLeagueMatchesAsync(league);
                    ClearLeagueCacheEntries(league);
                }
                await transaction.CommitAsync();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        private void ClearLeagueCacheEntries(string league)
        {
            _memoryCache.Remove($"augmentStat_{league}");
            _memoryCache.Remove($"traitStat_{league}");
            _memoryCache.Remove($"unitStat_{league}");
            _memoryCache.Remove($"itemStat_{league}");
            _memoryCache.Remove($"compStat_{league}");
        }

        private async Task ProcessLeagueMatchesAsync(string league)
        {
            var matches = await GetMatchesAsync(league);
            var comps = await _context.UserGuides.AsSplitQuery().Where(ug => ug.IsAutoGenerated == true)
                .Include(u => u.InitialUnit)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit).ToListAsync();

            var (unitStats, starUnitStats, traitStats, augmentStats, itemStats, compStats, tiersData) = await InitializeStatCollections();
            var (TotalMatches, Top4, Win, Place) = CalculateMatchResults(matches, comps, unitStats, starUnitStats, traitStats, augmentStats, itemStats, compStats, tiersData);

            await CheckVisibilityAsync(unitStats);
            await CheckVisibilityAsync(itemStats);
            await CheckVisibilityAsync(augmentStats);
            await CheckVisibilityAsync(traitStats);

            double averagePlace = TotalMatches != 0 ? Place / (double)TotalMatches : 0;

            UpdateDeltas(averagePlace, unitStats, starUnitStats, traitStats, augmentStats, itemStats, compStats);

            await SaveStatisticsAsync(league, TotalMatches, unitStats, starUnitStats, traitStats, augmentStats, itemStats, compStats);
        }

        private async Task<List<MatchDto>> GetMatchesAsync(string league)
        {
            var matchesQuery = _context.Matches
                .AsSplitQuery()
                .Select(m => new MatchDto
                {
                    Placement = m.Placement,
                    Augments = m.Augments,
                    League = m.League,
                    Units = m.Units.Select(u => new MatchUnitDto { CharacterId = u.CharacterId, ItemNames = u.ItemNames, Tier = u.Tier }).ToList(),
                    Traits = m.Traits.Select(t => new MatchTraitDto { Name = t.Name, NumUnits = t.NumUnits }).ToList()
                });

            if (!string.IsNullOrEmpty(league))
            {
                matchesQuery = matchesQuery.Where(m => m.League == league);
            }

            return await matchesQuery.ToListAsync();
        }

        private async Task<(Dictionary<string, UnitStat> unitStats, 
            Dictionary<string, StarredUnitStat> starUnitStats, 
            Dictionary<string, Dictionary<int, TraitStat>> traitStats, 
            Dictionary<string, AugmentStat> augmentStats, 
            Dictionary<string, ItemStat> itemStats, 
            Dictionary<string, CompStat> compStats,
            Dictionary<string, int[]> tiersData)> InitializeStatCollections()
        {
            var tiersData = await _context.Traits
                        .Select(t => new
                        {
                            t.InGameKey,
                            Levels = t.Tiers.Select(tier => tier.Level).ToArray()
                        })
                        .ToDictionaryAsync(
                            t => t.InGameKey,
                            t => t.Levels
                        );
            return (
                [],
                [],
                [],
                [],
                [],
                [],
                tiersData
            );
        }

        private static (int TotalMatches, int Top4, int Win, int Place) CalculateMatchResults(
            List<MatchDto> matches, 
            List<UserGuide> comps,
            Dictionary<string, UnitStat> unitStats, 
            Dictionary<string, StarredUnitStat> starUnitStats, 
            Dictionary<string, Dictionary<int, TraitStat>> traitStats, 
            Dictionary<string, AugmentStat> augmentStats, 
            Dictionary<string, ItemStat> itemStats, 
            Dictionary<string, CompStat> compStats,
            Dictionary<string, int[]> tiersData)
        {
            int totalMatches = matches.Count;
            int top4 = 0, win = 0, place = 0;

            foreach (var match in matches)
            {
                var placement = match.Placement;
                if (placement <= 4) top4++;
                if (placement == 1) win++;
                place += placement;

                ProcessComps(comps, compStats, match, placement);
                ProcessUnits(unitStats, starUnitStats, itemStats, match, placement);
                ProcessTraits(traitStats, tiersData, match, placement);
                ProcessAugments(augmentStats, match, placement);
            }

            return (totalMatches, top4, win, place);
        }

        private static void UpdateDeltas(
            double averagePlace, 
            Dictionary<string, UnitStat> unitStats, 
            Dictionary<string, StarredUnitStat> starUnitStats, 
            Dictionary<string, Dictionary<int, TraitStat>> traitStats, 
            Dictionary<string, AugmentStat> augmentStats, 
            Dictionary<string, ItemStat> itemStats, 
            Dictionary<string, CompStat> compStats)
        {
            void UpdateDelta(Stat stat)
            {
                stat.Delta = stat.Games != 0 ?  (stat.Place / (double)stat.Games) - averagePlace : averagePlace;
            }

            foreach (var comp in compStats.Values) UpdateDelta(comp.Stat);
            foreach (var unit in unitStats.Values) UpdateDelta(unit.Stat);
            foreach (var unit in starUnitStats.Values) UpdateDelta(unit.Stat);
            foreach (var item in itemStats.Values) UpdateDelta(item.Stat);
            foreach (var traitsList in traitStats.Values) foreach (var trait in traitsList.Values) UpdateDelta(trait.Stat);
            foreach (var augment in augmentStats.Values) foreach (var stat in augment.Stats) UpdateDelta(stat);
        }

        private async Task SaveStatisticsAsync(
            string league, 
            int totalMatches, 
            Dictionary<string, UnitStat> unitStats, 
            Dictionary<string, StarredUnitStat> starUnitStats, 
            Dictionary<string, Dictionary<int, TraitStat>> traitStats, 
            Dictionary<string, AugmentStat> augmentStats, 
            Dictionary<string, ItemStat> itemStats, 
            Dictionary<string, CompStat> compStats)
        {
            _context.BaseCompStat.RemoveRange(_context.BaseCompStat.Where(s => s.League == league));
            _context.BaseUnitStat.RemoveRange(_context.BaseUnitStat.Where(s => s.League == league));
            _context.BaseTraitStat.RemoveRange(_context.BaseTraitStat.Where(s => s.League == league));
            _context.BaseAugmentStat.RemoveRange(_context.BaseAugmentStat.Where(s => s.League == league));
            _context.BaseItemStat.RemoveRange(_context.BaseItemStat.Where(s => s.League == league));
            await _context.SaveChangesAsync();

            await CreateBaseStatsAsync(totalMatches, league, compStats, unitStats, starUnitStats, traitStats, augmentStats, itemStats);
        }

        private async Task CreateBaseStatsAsync(
            int totalMatches,
            string league, 
            Dictionary<string, CompStat> compStats, 
            Dictionary<string, UnitStat> unitStats, 
            Dictionary<string, StarredUnitStat> starUnitStats,
            Dictionary<string, Dictionary<int, TraitStat>> traitStats, 
            Dictionary<string, AugmentStat> augmentStats,
            Dictionary<string, ItemStat> itemStats)
        {
            foreach (var unitStat in unitStats.Values)
            {
                var matchingUnit = await _context.Units.FirstOrDefaultAsync(u => u.InGameKey == unitStat.InGameKey);
                if (matchingUnit != null)
                {
                    unitStat.Name = matchingUnit.Name;
                    if (starUnitStats.TryGetValue(unitStat.InGameKey, out var starredUnitStat))
                    {
                        starredUnitStat.Name = matchingUnit.Name;
                    }
                }
            }

            foreach (var traitStatList in traitStats.Values)
            {
                foreach (var traitStat in traitStatList.Values)
                {
                    var matchingTrait = await _context.Traits.FirstOrDefaultAsync(t => t.InGameKey == traitStat.InGameKey);
                    if (matchingTrait != null)
                    {
                        traitStat.Name = matchingTrait.Name;
                    }
                }
            }

            foreach (var augmentStat in augmentStats.Values)
            {
                var matchingAugment = await _context.Augments.FirstOrDefaultAsync(a => a.InGameKey == augmentStat.InGameKey);
                if (matchingAugment != null)
                {
                    augmentStat.Name = matchingAugment.Name;
                }
            }

            foreach (var itemStat in itemStats.Values)
            {
                var matchingItem = await _context.Items.FirstOrDefaultAsync(i => i.InGameKey == itemStat.InGameKey);
                if (matchingItem != null)
                {
                    itemStat.Name = matchingItem.Name;
                }
            }

            await _context.BaseCompStat.AddAsync(new BaseCompStat
            {
                Games = totalMatches,
                CompStats = [.. compStats.Values],
                League = league
            });
            await _context.BaseUnitStat.AddAsync(new BaseUnitStat
            {
                Games = totalMatches,
                UnitStats = [.. unitStats.Values],
                StarredUnitStats = [.. starUnitStats.Values],
                League = league
            });
            await _context.BaseTraitStat.AddAsync(new BaseTraitStat
            {
                Games = totalMatches,
                TraitStats = traitStats.Values.SelectMany(dict => dict.Values).ToList(),
                League = league
            });
            await _context.BaseAugmentStat.AddAsync(new BaseAugmentStat
            {
                Games = totalMatches,
                AugmentStats = [.. augmentStats.Values],
                League = league
            });
            await _context.BaseItemStat.AddAsync(new BaseItemStat
            {
                Games = totalMatches,
                ItemStats = [.. itemStats.Values],
                League = league
            });
            await _context.SaveChangesAsync();
        }

        private static void ProcessComps(
            List<UserGuide> comps, 
            Dictionary<string, CompStat> compStats,
            MatchDto match,
            int placement)
        {
            foreach (var team in comps)
            {
                if (team.InitialUnit == null) continue;
                int unitCount = match.Units.Count(champion => team.Hexes.Any(hex => hex.Unit.InGameKey == champion.CharacterId));
                if (unitCount >= 6)
                {
                    if (!compStats.TryGetValue(team.InitialUnit.InGameKey, out var compStat))
                    {
                        compStat = new CompStat { Name = team.InitialUnit.Name, InGameKey = team.InitialUnit.InGameKey, Units = [], Stat = new Stat() };
                        List<CompStatUnit> compStatUnits = team.Hexes
                            .Select(hex => new CompStatUnit { Unit = hex.Unit })
                            .ToList();
                        compStat.Units.AddRange(compStatUnits);
                        compStats[team.InitialUnit.InGameKey] = compStat;
                    }
                    var stat = compStat.Stat;
                    stat.Games++;
                    stat.Place += placement;
                    stat.Top4 += placement <= 4 ? 1 : 0;
                    stat.Win += placement == 1 ? 1 : 0;
                }
            }
        }

        private static void ProcessUnits(
            Dictionary<string, UnitStat> unitStats, 
            Dictionary<string, StarredUnitStat> starUnitStats,
            Dictionary<string, ItemStat> itemStats,
            MatchDto match,
            int placement)
        {
            foreach (var unit in match.Units)
            {
                if (!unitStats.TryGetValue(unit.CharacterId, out var unitStat))
                {
                    unitStat = new UnitStat { InGameKey = unit.CharacterId, Stat = new Stat() };
                    unitStats[unit.CharacterId] = unitStat;
                }

                var stat = unitStat.Stat;
                stat.Games++;
                stat.Place += placement;
                stat.Top4 += placement <= 4 ? 1 : 0;
                stat.Win += placement == 1 ? 1 : 0;

                if (unit.Tier == 3)
                {
                    if (!starUnitStats.TryGetValue(unit.CharacterId, out var starUnitStat))
                    {
                        starUnitStat = new StarredUnitStat { InGameKey = unit.CharacterId, Stat = new Stat() };
                        starUnitStats[unit.CharacterId] = starUnitStat;
                    }

                    var starStat = starUnitStat.Stat;
                    starStat.Games++;
                    starStat.Place += placement;
                    starStat.Top4 += placement <= 4 ? 1 : 0;
                    starStat.Win += placement == 1 ? 1 : 0;
                }

                ProcessItems(unit, itemStats, placement);
            }
        }

        private static void ProcessItems(
            MatchUnitDto unit, 
            Dictionary<string, ItemStat> itemStats, 
            int placement)
        {
            foreach (var item in unit.ItemNames)
            {
                if (!itemStats.TryGetValue(item, out var itemStat))
                {
                    itemStat = new ItemStat { InGameKey = item, Stat = new Stat() };
                    itemStats[item] = itemStat;
                }

                var itemStatInstance = itemStat.Stat;
                itemStatInstance.Games++;
                itemStatInstance.Place += placement;
                itemStatInstance.Top4 += placement <= 4 ? 1 : 0;
                itemStatInstance.Win += placement == 1 ? 1 : 0;
            }
        }

        private static void ProcessTraits(
            Dictionary<string, Dictionary<int, TraitStat>> traitStats,
            Dictionary<string, int[]> tiersData,
            MatchDto match,
            int placement)
        {
            foreach (var trait in match.Traits)
            {
                if (tiersData.TryGetValue(trait.Name, out var tiers))
                {
                    var flooredNumUnits = tiers.OrderBy(t => t).LastOrDefault(t => t <= trait.NumUnits);
                    if (flooredNumUnits == 0) continue;
                    trait.NumUnits = flooredNumUnits;
                }

                if (!traitStats.TryGetValue(trait.Name, out var traitDict))
                {
                    traitDict = [];
                    traitStats[trait.Name] = traitDict;
                }

                if (!traitDict.TryGetValue(trait.NumUnits, out var traitStat))
                {
                    traitStat = new TraitStat { InGameKey = trait.Name, NumUnits = trait.NumUnits, Stat = new Stat() };
                    traitDict[trait.NumUnits] = traitStat;
                }

                var traitStatInstance = traitDict[trait.NumUnits].Stat;
                traitStatInstance.Games++;
                traitStatInstance.Place += placement;
                traitStatInstance.Top4 += placement <= 4 ? 1 : 0;
                traitStatInstance.Win += placement == 1 ? 1 : 0;
            }
        }

        private static void ProcessAugments( 
            Dictionary<string, AugmentStat> augmentStats,
            MatchDto match,
            int placement)
        {
            for (int i = 0; i < match.Augments.Count; i++)
            {
                var augment = match.Augments[i];
                if (!augmentStats.TryGetValue(augment, out var augmentStat))
                {
                    augmentStat = new AugmentStat { InGameKey = augment, Stats = [] };
                    augmentStats[augment] = augmentStat;
                }

                while (augmentStat.Stats.Count <= i)
                {
                    augmentStat.Stats.Add(new Stat());
                }

                var stat = augmentStat.Stats[i];
                stat.Games++;
                stat.Place += placement;
                stat.Top4 += placement <= 4 ? 1 : 0;
                stat.Win += placement == 1 ? 1 : 0;
            }
        }
        private async Task CheckVisibilityAsync<T>(Dictionary<string, T> dict)
        {
            var units = await _context.Units.AsNoTracking().ToListAsync();
            var items = await _context.Items.AsNoTracking().ToListAsync();
            var augments = await _context.Augments.AsNoTracking().ToListAsync();
            var traits = await _context.Traits.AsNoTracking().ToListAsync();

            var unitDict = units.ToDictionary(u => u.InGameKey, u => u.IsHidden != true);
            var itemDict = items.ToDictionary(i => i.InGameKey, i => i.IsHidden != true);
            var augmentDict = augments.ToDictionary(a => a.InGameKey, a => a.IsHidden != true);
            var traitDict = traits.ToDictionary(t => t.InGameKey, t => t.IsHidden != true);

            var filteredDict = new Dictionary<string, T>();

            bool IsVisible(string key)
            {
                if (unitDict.TryGetValue(key, out var unitVisible)) return unitVisible;
                if (itemDict.TryGetValue(key, out var itemVisible)) return itemVisible;
                if (augmentDict.TryGetValue(key, out var augmentVisible)) return augmentVisible;
                if (traitDict.TryGetValue(key, out var traitVisible)) return traitVisible;
                return false;
            }

            foreach (var kvp in dict)
            {
                var key = kvp.Key;
                var stat = kvp.Value;

                if (IsVisible(key))
                {
                    filteredDict[key] = stat;
                }
            }

            dict.Clear();
            foreach (var kvp in filteredDict)
            {
                dict[kvp.Key] = kvp.Value;
            }
        }
    }
}
