using AutoMapper;
using Microsoft.EntityFrameworkCore;
using TFT_API.Data;
using TFT_API.Helpers;
using TFT_API.Models.Match;
using TFT_API.Models.Stats;
using TFT_API.Models.Stats.AugmentStats;
using TFT_API.Models.Stats.CompStats;
using TFT_API.Models.Stats.ItemStats;
using TFT_API.Models.Stats.TraitStats;
using TFT_API.Models.Stats.UnitStats;

namespace TFT_API.Services
{
    public class StatisticsService
    {
        private readonly TFTContext _context;

        public StatisticsService(TFTContext context)
        {
            _context = context;
        }

        public async Task CalculateAndStoreStatisticsAsync()
        {

            var matches = await _context.Matches
                .AsNoTracking()
                .AsSplitQuery()
                .Select(m => new
                {
                    m.Placement,
                    m.Augments,
                    Units = m.Units.Select(u => new { u.CharacterId, u.ItemNames, u.Tier }).ToList(),
                    Traits = m.Traits.Select(t => new MatchTraitDto { Name = t.Name, NumUnits = t.NumUnits }).ToList()
                })
                .ToListAsync();
            var units = await _context.Units.Where(u => u.IsHidden != true).ToListAsync();
            var items = await _context.Items.Where(u => u.IsHidden != true).ToListAsync();
            var augments = await _context.Augments.Where(u => u.IsHidden != true).ToListAsync();
            var traits = await _context.Traits.Where(u => u.IsHidden != true).ToListAsync();
            var comps = await _context.UserGuides.AsSplitQuery().Where(ug => ug.isAutoGenerated == true)
                .Include(u => u.InitialUnit)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit).ToListAsync();

            var unitStats = new Dictionary<string, UnitStat>();
            var starUnitStats = new Dictionary<string, StarredUnitStat>();
            var traitStats = new Dictionary<string, Dictionary<int, TraitStat>>();
            var augmentStats = new Dictionary<string, AugmentStat>();
            var itemStats = new Dictionary<string, ItemStat>();
            var compStats = new Dictionary<string, CompStat>();
            var augmentStageCounts = new Dictionary<string, int[]>();

            var totalMatches = matches.Count;
            var top4 = 0;
            var win = 0;
            var place = 0;

            foreach (var match in matches)
            {
                var placement = match.Placement;
                if (placement <= 4) top4++;
                if (placement == 1) win++;
                place += placement;

                foreach(var team in comps)
                {
                    int unitCount = match.Units.Count(champion => team.Hexes.Any(hex => hex.Unit.InGameKey == champion.CharacterId));
                    if (unitCount >= 6)
                    {
                        if(!compStats.TryGetValue(team.InitialUnit.InGameKey, out var compStat))
                        {
                            compStat = new CompStat { Name = team.InitialUnit.InGameKey , Units = new List<CompStatUnit>(), Stat = new Stat() };
                            List<CompStatUnit> compStatUnits = team.Hexes
                                .Select(hex => new CompStatUnit { Unit = hex.Unit })
                                .ToList();
                            compStat.Units.AddRange(compStatUnits);
                            compStats[team.InitialUnit.InGameKey] = compStat;
                        }
                        var stat = compStat.Stat;
                        stat.Games++;
                        stat.Place += placement;
                        stat.Top4 += placement <= 4 ? 1 : 0;
                        stat.Win += placement == 1 ? 1 : 0;
                    }
                }

                foreach (var unit in match.Units)
                {
                    var currentUnit = units.FirstOrDefault(u => u.InGameKey == unit.CharacterId);
                    if (currentUnit == null) continue;
                    if (!unitStats.TryGetValue(unit.CharacterId, out var unitStat))
                    {
                        unitStat = new UnitStat { Name = unit.CharacterId, Stat = new Stat() };
                        unitStats[unit.CharacterId] = unitStat;
                    }

                    var stat = unitStat.Stat;
                    stat.Games++;
                    stat.Place += placement;
                    stat.Top4 += placement <= 4 ? 1 : 0;
                    stat.Win += placement == 1 ? 1 : 0;

                    if (unit.Tier == 3)
                    {
                        if (!starUnitStats.TryGetValue(unit.CharacterId, out var starUnitStat))
                        {
                            starUnitStat = new StarredUnitStat { Name = unit.CharacterId, Stat = new Stat() };
                            starUnitStats[unit.CharacterId] = starUnitStat;
                        }

                        var starStat = starUnitStats[unit.CharacterId].Stat;
                        starStat.Games++;
                        starStat.Place += placement;
                        starStat.Top4 += placement <= 4 ? 1 : 0;
                        starStat.Win += placement == 1 ? 1 : 0;
                    }

                    foreach (var item in unit.ItemNames)
                    {
                        var currentItem = items.FirstOrDefault(i => i.InGameKey == item);
                        if (currentItem == null) continue;
                        if (!itemStats.TryGetValue(item, out var itemStat))
                        {
                            itemStat = new ItemStat { Name = item, Stat = new Stat() };
                            itemStats[item] = itemStat;
                        }

                        var itemStatInstance = itemStats[item].Stat;
                        itemStatInstance.Games++;
                        itemStatInstance.Place += placement;
                        itemStatInstance.Top4 += placement <= 4 ? 1 : 0;
                        itemStatInstance.Win += placement == 1 ? 1 : 0;
                    }
                }

                foreach (var trait in match.Traits)
                {
                    var currentTrait = traits.FirstOrDefault(t => t.InGameKey == trait.Name);
                    if (currentTrait == null) continue;
                    if (TiersData.Tiers.TryGetValue(trait.Name, out int[] tiers))
                    {
                        var flooredNumUnits = tiers.OrderBy(t => t).LastOrDefault(t => t <= trait.NumUnits);
                        if (flooredNumUnits == 0) continue;
                        trait.NumUnits = flooredNumUnits;
                    }

                    if (!traitStats.TryGetValue(trait.Name, out var traitDict))
                    {
                        traitDict = new Dictionary<int, TraitStat>();
                        traitStats[trait.Name] = traitDict;
                    }

                    if (!traitDict.TryGetValue(trait.NumUnits, out var traitStat))
                    {
                        traitStat = new TraitStat { Name = trait.Name, NumUnits = trait.NumUnits, Stat = new Stat() };
                        traitDict[trait.NumUnits] = traitStat;
                    }

                    var traitStatInstance = traitDict[trait.NumUnits].Stat;
                    traitStatInstance.Games++;
                    traitStatInstance.Place += placement;
                    traitStatInstance.Top4 += placement <= 4 ? 1 : 0;
                    traitStatInstance.Win += placement == 1 ? 1 : 0;
                }

                for (int i = 0; i < match.Augments.Count; i++)
                {
                    var augment = match.Augments[i];
                    var currentAugment = augments.FirstOrDefault(a => a.InGameKey == augment);
                    if (currentAugment == null || augment.Contains("SticksAndStones")) continue;
                    if (!augmentStats.TryGetValue(augment, out var augmentStat))
                    {
                        augmentStat = new AugmentStat { Name = augment, Stats = new List<Stat>() };
                        augmentStats[augment] = augmentStat;
                    }

                    while (augmentStat.Stats.Count <= i)
                    {
                        augmentStat.Stats.Add(new Stat());
                    }

                    var stat = augmentStat.Stats[i];
                    stat.Games++;
                    stat.Place += placement;
                    stat.Top4 += placement <= 4 ? 1 : 0;
                    stat.Win += placement == 1 ? 1 : 0;
                }
            }

            double averagePlace = totalMatches != 0 ? place / (double)totalMatches : 0;

            void UpdateDelta(Stat stat)
            {
                stat.Delta = stat.Games != 0 ? averagePlace - (stat.Place / (double)stat.Games) : averagePlace;
            }

            foreach (var comp in compStats.Values) UpdateDelta(comp.Stat);
            foreach (var unit in unitStats.Values) UpdateDelta(unit.Stat);
            foreach (var item in itemStats.Values) UpdateDelta(item.Stat);
            foreach (var traitsList in traitStats.Values) foreach (var trait in traitsList.Values) UpdateDelta(trait.Stat);
            foreach (var augment in augmentStats.Values) foreach (var stat in augment.Stats) UpdateDelta(stat);



            _context.Stats.RemoveRange(_context.Stats.Where(s => s.AugmentStatId != null));
            await _context.SaveChangesAsync();
            _context.CompStats.RemoveRange(_context.CompStats);
            _context.UnitStats.RemoveRange(_context.UnitStats);
            _context.StarredUnitStats.RemoveRange(_context.StarredUnitStats);
            _context.TraitStats.RemoveRange(_context.TraitStats);
            _context.AugmentStats.RemoveRange(_context.AugmentStats);
            _context.ItemStats.RemoveRange(_context.ItemStats);
            await _context.SaveChangesAsync();
            _context.BaseCompStat.RemoveRange(_context.BaseCompStat);
            _context.BaseAugmentStat.RemoveRange(_context.BaseAugmentStat);
            _context.BaseItemStat.RemoveRange(_context.BaseItemStat);
            _context.BaseTraitStat.RemoveRange(_context.BaseTraitStat);
            _context.BaseUnitStat.RemoveRange(_context.BaseUnitStat);
            await _context.SaveChangesAsync();

            _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT ('CompStats', RESEED, 0)");
            _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT ('UnitStats', RESEED, 0)");
            _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT ('StarredUnitStats', RESEED, 0)");
            _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT ('TraitStats', RESEED, 0)");
            _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT ('AugmentStats', RESEED, 0)");
            _context.Database.ExecuteSqlRaw("DBCC CHECKIDENT ('ItemStats', RESEED, 0)");

            var baseCompStat = new BaseCompStat
            {
                Games = totalMatches,
                CompStats = compStats.Values.ToList(),
            };
            var baseAugmentStat = new BaseAugmentStat
            {
                Games = totalMatches,
                AugmentStats = augmentStats.Values.ToList(),
            };
            var baseItemStat = new BaseItemStat
            {
                Games = totalMatches,
                ItemStats = itemStats.Values.ToList(),
            };
            var baseUnitStat = new BaseUnitStat
            {
                Games = totalMatches,
                UnitStats = unitStats.Values.ToList(),
                StarredUnitStats = starUnitStats.Values.ToList(),
            };
            var baseTraitStat = new BaseTraitStat
            {
                Games = totalMatches,
                TraitStats = traitStats.Values.SelectMany(dict => dict.Values).ToList(),    
            };

            await _context.BaseCompStat.AddAsync(baseCompStat);
            await _context.BaseUnitStat.AddAsync(baseUnitStat);
            await _context.BaseTraitStat.AddAsync(baseTraitStat);
            await _context.BaseAugmentStat.AddAsync(baseAugmentStat);
            await _context.BaseItemStat.AddAsync(baseItemStat);
            await _context.SaveChangesAsync();

        }
    }
}
