// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TFT_API.Data;

#nullable disable

namespace TFT_API.Migrations
{
    [DbContext(typeof(TFTContext))]
    [Migration("20240630102906_CommentRequestFix3")]
    partial class CommentRequestFix3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TFT_API.Models.Augments.PersistedAugment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InGameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Augments");
                });

            modelBuilder.Entity("TFT_API.Models.Item.PersistedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedTraitKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InGameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsComponent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("ItemStats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isEmblem")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TFT_API.Models.Match.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Augments")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("League")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Placement")
                        .HasColumnType("int");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Augments")
                        .HasDatabaseName("IX_Match_Augments");

                    b.HasIndex("Placement")
                        .HasDatabaseName("IX_Match_Placement");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TFT_API.Models.Match.MatchTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumUnits")
                        .HasColumnType("int");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TierCurrent")
                        .HasColumnType("int");

                    b.Property<int>("TierTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_MatchTrait_Name");

                    b.HasIndex("NumUnits")
                        .HasDatabaseName("IX_MatchTrait_NumUnits");

                    b.ToTable("MatchTrait");
                });

            modelBuilder.Entity("TFT_API.Models.Match.MatchUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("IX_MatchUnit_CharacterId");

                    b.HasIndex("MatchId");

                    b.HasIndex("Tier")
                        .HasDatabaseName("IX_MatchUnit_Tier");

                    b.ToTable("MatchUnit");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.AugmentStats.AugmentStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseAugmentStatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseAugmentStatId");

                    b.ToTable("AugmentStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.AugmentStats.BaseAugmentStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseAugmentStat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.BaseCompStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseCompStat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.CompStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseCompStatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseCompStatId");

                    b.HasIndex("StatId");

                    b.ToTable("CompStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.CompStatUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompStatId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompStatId");

                    b.HasIndex("UnitId");

                    b.ToTable("CompStatUnit");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.ItemStats.BaseItemStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseItemStat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.ItemStats.ItemStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseItemStatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemStatId");

                    b.HasIndex("StatId");

                    b.ToTable("ItemStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AugmentStatId")
                        .HasColumnType("int");

                    b.Property<double>("Delta")
                        .HasColumnType("float");

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("Top4")
                        .HasColumnType("int");

                    b.Property<int>("Win")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AugmentStatId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.TraitStats.BaseTraitStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseTraitStat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.TraitStats.TraitStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseTraitStatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumUnits")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseTraitStatId");

                    b.HasIndex("StatId");

                    b.ToTable("TraitStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.UnitStats.BaseUnitStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Games")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseUnitStat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.UnitStats.StarredUnitStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseUnitStatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitStatId");

                    b.HasIndex("StatId");

                    b.ToTable("StarredUnitStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.UnitStats.UnitStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseUnitStatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitStatId");

                    b.HasIndex("StatId");

                    b.ToTable("UnitStats");
                });

            modelBuilder.Entity("TFT_API.Models.Trait.PersistedTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InGameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TierString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("TFT_API.Models.Trait.TraitTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("PersistedTraitId")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersistedTraitId");

                    b.ToTable("TraitTier");
                });

            modelBuilder.Entity("TFT_API.Models.Unit.PersistedUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<string>("AttackDamage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttackRange")
                        .HasColumnType("int");

                    b.Property<double>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<string>("CenteredImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamagePerSecond")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InGameKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MagicalResistance")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("SplashImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("TFT_API.Models.Unit.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillMana")
                        .HasColumnType("int");

                    b.Property<int>("StartingMana")
                        .HasColumnType("int");

                    b.Property<string>("Stats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("TFT_API.Models.Unit.UnitTrait", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("TraitId")
                        .HasColumnType("int");

                    b.HasKey("UnitId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("UnitTraits");
                });

            modelBuilder.Entity("TFT_API.Models.User.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserGuideId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGuideId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TFT_API.Models.User.PersistedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DownVotesCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuidesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpVotesCount")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TFT_API.Models.User.Saved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuideId")
                        .HasColumnType("int");

                    b.Property<int?>("PersistedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersistedUserId");

                    b.ToTable("SavedGuides");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.GuideAugment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AugmentId")
                        .HasColumnType("int");

                    b.Property<int?>("AutoGeneratedGuideId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGuideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AugmentId");

                    b.HasIndex("UserGuideId");

                    b.ToTable("GuideAugments");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.GuideTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutoGeneratedGuideId")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TraitId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGuideId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TraitId");

                    b.HasIndex("UserGuideId");

                    b.ToTable("GuideTraits");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.Hex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutoGeneratedGuideId")
                        .HasColumnType("int");

                    b.Property<int>("Coordinates")
                        .HasColumnType("int");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGuideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserGuideId");

                    b.ToTable("Hexes");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.HexItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HexId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HexId");

                    b.HasIndex("ItemId");

                    b.ToTable("HexItems");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.UserGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownVotes")
                        .HasColumnType("int");

                    b.Property<string>("GeneralDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InitialUnitId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersistedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PlayStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage2Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage3Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage4Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UsersUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool?>("isAutoGenerated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InitialUnitId");

                    b.HasIndex("PersistedUserId");

                    b.ToTable("UserGuides");
                });

            modelBuilder.Entity("TFT_API.Models.Votes.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("TFT_API.Models.Match.MatchTrait", b =>
                {
                    b.HasOne("TFT_API.Models.Match.Match", null)
                        .WithMany("Traits")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("TFT_API.Models.Match.MatchUnit", b =>
                {
                    b.HasOne("TFT_API.Models.Match.Match", null)
                        .WithMany("Units")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.AugmentStats.AugmentStat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.AugmentStats.BaseAugmentStat", null)
                        .WithMany("AugmentStats")
                        .HasForeignKey("BaseAugmentStatId");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.CompStat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.CompStats.BaseCompStat", null)
                        .WithMany("CompStats")
                        .HasForeignKey("BaseCompStatId");

                    b.HasOne("TFT_API.Models.Stats.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.CompStatUnit", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.CompStats.CompStat", null)
                        .WithMany("Units")
                        .HasForeignKey("CompStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_API.Models.Unit.PersistedUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.ItemStats.ItemStat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.ItemStats.BaseItemStat", null)
                        .WithMany("ItemStats")
                        .HasForeignKey("BaseItemStatId");

                    b.HasOne("TFT_API.Models.Stats.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.Stat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.AugmentStats.AugmentStat", null)
                        .WithMany("Stats")
                        .HasForeignKey("AugmentStatId");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.TraitStats.TraitStat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.TraitStats.BaseTraitStat", null)
                        .WithMany("TraitStats")
                        .HasForeignKey("BaseTraitStatId");

                    b.HasOne("TFT_API.Models.Stats.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.UnitStats.StarredUnitStat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.UnitStats.BaseUnitStat", null)
                        .WithMany("StarredUnitStats")
                        .HasForeignKey("BaseUnitStatId");

                    b.HasOne("TFT_API.Models.Stats.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.UnitStats.UnitStat", b =>
                {
                    b.HasOne("TFT_API.Models.Stats.UnitStats.BaseUnitStat", null)
                        .WithMany("UnitStats")
                        .HasForeignKey("BaseUnitStatId");

                    b.HasOne("TFT_API.Models.Stats.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("TFT_API.Models.Trait.TraitTier", b =>
                {
                    b.HasOne("TFT_API.Models.Trait.PersistedTrait", null)
                        .WithMany("Tiers")
                        .HasForeignKey("PersistedTraitId");
                });

            modelBuilder.Entity("TFT_API.Models.Unit.PersistedUnit", b =>
                {
                    b.HasOne("TFT_API.Models.Unit.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TFT_API.Models.Unit.UnitTrait", b =>
                {
                    b.HasOne("TFT_API.Models.Trait.PersistedTrait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_API.Models.Unit.PersistedUnit", "Unit")
                        .WithMany("Traits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TFT_API.Models.User.Comment", b =>
                {
                    b.HasOne("TFT_API.Models.UserGuides.UserGuide", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TFT_API.Models.User.Saved", b =>
                {
                    b.HasOne("TFT_API.Models.User.PersistedUser", null)
                        .WithMany("Saved")
                        .HasForeignKey("PersistedUserId");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.GuideAugment", b =>
                {
                    b.HasOne("TFT_API.Models.Augments.PersistedAugment", "Augment")
                        .WithMany()
                        .HasForeignKey("AugmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_API.Models.UserGuides.UserGuide", null)
                        .WithMany("Augments")
                        .HasForeignKey("UserGuideId");

                    b.Navigation("Augment");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.GuideTrait", b =>
                {
                    b.HasOne("TFT_API.Models.Trait.PersistedTrait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_API.Models.UserGuides.UserGuide", null)
                        .WithMany("Traits")
                        .HasForeignKey("UserGuideId");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.Hex", b =>
                {
                    b.HasOne("TFT_API.Models.Unit.PersistedUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_API.Models.UserGuides.UserGuide", null)
                        .WithMany("Hexes")
                        .HasForeignKey("UserGuideId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.HexItem", b =>
                {
                    b.HasOne("TFT_API.Models.UserGuides.Hex", null)
                        .WithMany("CurrentItems")
                        .HasForeignKey("HexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFT_API.Models.Item.PersistedItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.UserGuide", b =>
                {
                    b.HasOne("TFT_API.Models.Unit.PersistedUnit", "InitialUnit")
                        .WithMany()
                        .HasForeignKey("InitialUnitId");

                    b.HasOne("TFT_API.Models.User.PersistedUser", null)
                        .WithMany("UserGuides")
                        .HasForeignKey("PersistedUserId");

                    b.Navigation("InitialUnit");
                });

            modelBuilder.Entity("TFT_API.Models.Match.Match", b =>
                {
                    b.Navigation("Traits");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.AugmentStats.AugmentStat", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.AugmentStats.BaseAugmentStat", b =>
                {
                    b.Navigation("AugmentStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.BaseCompStat", b =>
                {
                    b.Navigation("CompStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.CompStats.CompStat", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.ItemStats.BaseItemStat", b =>
                {
                    b.Navigation("ItemStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.TraitStats.BaseTraitStat", b =>
                {
                    b.Navigation("TraitStats");
                });

            modelBuilder.Entity("TFT_API.Models.Stats.UnitStats.BaseUnitStat", b =>
                {
                    b.Navigation("StarredUnitStats");

                    b.Navigation("UnitStats");
                });

            modelBuilder.Entity("TFT_API.Models.Trait.PersistedTrait", b =>
                {
                    b.Navigation("Tiers");
                });

            modelBuilder.Entity("TFT_API.Models.Unit.PersistedUnit", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("TFT_API.Models.User.PersistedUser", b =>
                {
                    b.Navigation("Saved");

                    b.Navigation("UserGuides");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.Hex", b =>
                {
                    b.Navigation("CurrentItems");
                });

            modelBuilder.Entity("TFT_API.Models.UserGuides.UserGuide", b =>
                {
                    b.Navigation("Augments");

                    b.Navigation("Comments");

                    b.Navigation("Hexes");

                    b.Navigation("Traits");
                });
#pragma warning restore 612, 618
        }
    }
}
