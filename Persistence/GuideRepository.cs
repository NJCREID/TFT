using Microsoft.EntityFrameworkCore;
using TFT_API.Data;
using TFT_API.Interfaces;
using TFT_API.Models.AutoGeneratedGuide;
using TFT_API.Models.FetchResponse;
using TFT_API.Models.Trait;
using TFT_API.Models.UserGuides;


namespace TFT_API.Persistence
{
    public class GuideRepository(TFTContext context) : IGuideDataAccess
    {
        private readonly TFTContext _context = context;

        public async Task<UserGuideDto> AddUserGuideAsync(UserGuide userGuide)
        {
            _context.UserGuides.Add(userGuide);
            await _context.SaveChangesAsync();
            return MapUserGuideToDto(userGuide);
        }

        public async Task<List<FeedUserGuideDto>> GetUserGuidesAsync(string sortBy)
        {
            string lowerSortBy = sortBy.ToLower();
            IQueryable<UserGuide> userGuidesQuery = _context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.IsDraft != true && ug.IsAutoGenerated != true);

            userGuidesQuery = lowerSortBy switch
            {
                "best" => userGuidesQuery.OrderByDescending(ug => ug.UpVotes),
                "top" => userGuidesQuery.OrderByDescending(ug => ug.Views),
                "new" => userGuidesQuery.OrderByDescending(ug => ug.CreatedAt),
                _ => userGuidesQuery.OrderByDescending(ug => ug.CreatedAt),
            };

            return await ProjectToFeedUserGuideDto(userGuidesQuery).ToListAsync();
        }

        public async Task<List<FeedUserGuideDto>> GetUserGuidesByUserIdAsync(int userId)
        {
            return await ProjectToFeedUserGuideDto(_context.UserGuides.AsSplitQuery().Where(ug => ug.UserId == userId)).ToListAsync();

        }

        public async Task<List<FeedUserGuideDto>> GetCommentedUserGuidesAsync(int userId)
        {
            return await ProjectToFeedUserGuideDto(_context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.Comments.Any(comment => comment.UserId == userId))).ToListAsync();

        }

        public async Task<List<FeedUserGuideDto>> GetUpvotedUserGuidesAsync(int userId)
        {
            return await ProjectToFeedUserGuideDto(_context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.Votes.Any(vote => vote.IsUpvote == true && vote.UserId == userId))).ToListAsync();

        }

        public async Task<List<FeedUserGuideDto>> GetDownvotedUserGuidesAsync(int userId)
        {
            return await ProjectToFeedUserGuideDto(_context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.Votes.Any(vote => vote.IsUpvote == false && vote.UserId == userId))).ToListAsync();

        }

        public async Task<UserGuide?> GetFullUserGuideByIdAsync(int id)
        {
            return await _context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.Id == id).Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .Include(u => u.Comments)
                .FirstOrDefaultAsync();
        }

        public async Task<UserGuideDto?> GetUserGuideByIdAsync(int id)
        {
            return await ProjectToUserGuideDto(_context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.Id == id).Include(u => u.Traits))
                .FirstOrDefaultAsync();
        }

        public async Task<UserGuideDto?> UpdateUserGuideAsync(UserGuide userGuide)
        {
            var currentUserGuide = await GetFullUserGuideByIdAsync(userGuide.Id);
            if (currentUserGuide != null)
            {
                _context.Entry(currentUserGuide).CurrentValues.SetValues(userGuide);
                await _context.SaveChangesAsync();
                return MapUserGuideToDto(userGuide);
            }
            return null;
        }

        public async Task DeleteUserGuideAsync(int id)
        {
            var userGuide = await _context.UserGuides.FindAsync(id);
            if (userGuide != null)
            {
                _context.UserGuides.Remove(userGuide);
                await _context.SaveChangesAsync();
            }
        }

        public async Task<List<AutoGeneratedGuideDto>> GetAutoGeneratedGuidesAsync()
        {
            return await ProjectToAutoGeneratedGuideDto(_context.UserGuides
                .AsSplitQuery()
                .Where(u => u.IsAutoGenerated == true)).ToListAsync();
        }

        public async Task<Dictionary<int, bool>> GetUserVotesAsync(int userId)
        {
            return await _context.Votes
                .AsSplitQuery()
                .Where(v => v.UserId == userId)
                .ToDictionaryAsync(v => v.UserGuideId, v => v.IsUpvote);
        }

        private static IQueryable<FeedUserGuideDto> ProjectToFeedUserGuideDto(IQueryable<UserGuide> query)
        {
            return query.Select(ug => new FeedUserGuideDto
            {
                Id = ug.Id,
                UserId = ug.UserId ?? 0,
                UsersUsername = ug.UsersUsername ?? "",
                UpVotes = ug.UpVotes,
                DownVotes = ug.DownVotes,
                Patch = ug.Patch,
                Name = ug.Name,
                Stage2Desc = ug.Stage2Desc,
                Stage3Desc = ug.Stage3Desc,
                Stage4Desc = ug.Stage4Desc,
                GeneralDesc = ug.GeneralDesc,
                DifficultyLevel = ug.DifficultyLevel,
                PlayStyle = ug.PlayStyle,
                Hexes = ug.Hexes.Select(h => new HexDto
                {
                    Unit = new GuideUnitDto
                    {
                        InGameKey = h.Unit.InGameKey,
                        Name = h.Unit.Name,
                        Tier = h.Unit.Tier,
                        Cost = h.Unit.Cost,
                        Traits = h.Unit.Traits.Select(t => new PartialUnitTraitDto
                        {
                            Name = t.Trait.Name,
                            InGameKey = t.Trait.InGameKey,
                        }).ToList(),
                    },
                    CurrentItems = h.CurrentItems.Select(ci => new GuideItemDto
                    {
                        InGameKey = ci.Item.InGameKey,
                        Name = ci.Item.Name,
                        Recipe = ci.Item.Recipe,
                        Desc = ci.Item.Desc,
                        ShortDesc = ci.Item.ShortDesc,
                        FromDesc = ci.Item.FromDesc,   
                    }).ToList(),
                    IsStarred = h.IsStarred,
                    Coordinates = h.Coordinates
                }).ToList(),
                Traits = ug.Traits.Select(t => new PartialGuideTraitDto
                {
                    Value = t.Value,
                    Tier = t.Tier,
                    Name = t.Trait.Name,
                    InGameKey = t.Trait.InGameKey,
                }).ToList(),
                Augments = ug.Augments.Select(a => new GuideAugmentDto
                {
                    InGameKey = a.Augment.InGameKey,
                    Name = a.Augment.Name,
                    Desc = a.Augment.Desc,
                    Tier = a.Augment.Tier
                }).ToList(),
                IsUpvote = null
            });
        }

        private static IQueryable<UserGuideDto> ProjectToUserGuideDto(IQueryable<UserGuide> query)
        {
            return query.Select(ug => new UserGuideDto
            {
                Id = ug.Id,
                UserId = ug.UserId ?? 0,
                UsersUsername = ug.UsersUsername ?? "",
                Name = ug.Name,
                Stage2Desc = ug.Stage2Desc,
                Stage3Desc = ug.Stage3Desc,
                Stage4Desc = ug.Stage4Desc,
                GeneralDesc = ug.GeneralDesc,
                DifficultyLevel = ug.DifficultyLevel,
                PlayStyle = ug.PlayStyle,
                Hexes = ug.Hexes.Select(h => new HexDto
                {
                    Unit = new GuideUnitDto
                    {
                        InGameKey = h.Unit.InGameKey,
                        Name = h.Unit.Name,
                        Tier = h.Unit.Tier,
                        Cost = h.Unit.Cost,
                        Traits = h.Unit.Traits.Select(t => new PartialUnitTraitDto
                        {
                            Name = t.Trait.Name,
                            InGameKey = t.Trait.InGameKey,
                        }).ToList(),
                    },
                    CurrentItems = h.CurrentItems.Select(ci => new GuideItemDto
                    {
                        InGameKey = ci.Item.InGameKey,
                        Name = ci.Item.Name,
                        Recipe = ci.Item.Recipe,
                        Desc = ci.Item.Desc,
                        ShortDesc = ci.Item.ShortDesc,
                        FromDesc = ci.Item.FromDesc,
                    }).ToList(),
                    IsStarred = h.IsStarred,
                    Coordinates = h.Coordinates
                }).ToList(),
                Traits = ug.Traits.Select(t => new GuideTraitDto
                {
                    Value = t.Value,
                    Tier = t.Tier,
                    Name = t.Trait.Name,
                    InGameKey = t.Trait.InGameKey,
                    Tiers = t.Trait.Tiers.Select(tt => new TraitTierDto
                    {
                        Level = tt.Level,
                        Rarity = tt.Rarity,
                    }).ToList(),
                }).ToList(),
                Augments = ug.Augments.Select(a => new GuideAugmentDto
                {
                    InGameKey = a.Augment.InGameKey,
                    Name = a.Augment.Name,
                    Desc = a.Augment.Desc,
                    Tier = a.Augment.Tier

                }).ToList(),
                IsUpvote = null,
                Comments = ug.Comments.Select(c => new CommentDto
                {
                    Id = c.Id,
                    UserGuideId = c.UserGuideId,
                    UserId = c.UserId,
                    Author = c.Author,
                    Content = c.Content,
                }).ToList()
            });
        }

        private static IQueryable<AutoGeneratedGuideDto> ProjectToAutoGeneratedGuideDto(IQueryable<UserGuide> query)
        {
            return query.Select(ug => new AutoGeneratedGuideDto
            {
                Id = ug.Id,
                UpVotes = ug.UpVotes,
                InitialUnit =  new GuideUnitDto
                {
                    InGameKey = ug.InitialUnit.InGameKey,
                    Name = ug.InitialUnit.Name,
                    Tier = ug.InitialUnit.Tier,
                    Cost = ug.InitialUnit.Cost,
                    Traits = ug.InitialUnit.Traits.Select(t => new PartialUnitTraitDto
                    {
                        Name = t.Trait.Name,
                        InGameKey = t.Trait.InGameKey,
                    }).ToList(),
                },
                DownVotes = ug.DownVotes,
                Views = ug.Views,
                Patch = ug.Patch,
                Name = ug.Name,
                Stage2Desc = ug.Stage2Desc,
                Stage3Desc = ug.Stage3Desc,
                Stage4Desc = ug.Stage4Desc,
                GeneralDesc = ug.GeneralDesc,
                DifficultyLevel = ug.DifficultyLevel,
                PlayStyle = ug.PlayStyle,
                Hexes = ug.Hexes.Select(h => new HexDto
                {
                    Unit = new GuideUnitDto
                    {
                        InGameKey = h.Unit.InGameKey,
                        Name = h.Unit.Name,
                        Tier = h.Unit.Tier,
                        Cost = h.Unit.Cost,
                        Traits = h.Unit.Traits.Select(t => new PartialUnitTraitDto
                        {
                            Name = t.Trait.Name,
                            InGameKey = t.Trait.InGameKey,
                        }).ToList(),
                    },
                    CurrentItems = h.CurrentItems.Select(ci => new GuideItemDto
                    {
                        InGameKey = ci.Item.InGameKey,
                        Name = ci.Item.Name,
                        Recipe = ci.Item.Recipe,
                        Desc = ci.Item.Desc,
                        ShortDesc = ci.Item.ShortDesc,
                        FromDesc = ci.Item.FromDesc,
                    }).ToList(),
                    IsStarred = h.IsStarred,
                    Coordinates = h.Coordinates
                }).ToList(),
                Traits = ug.Traits.Select(t => new PartialGuideTraitDto
                {
                    Value = t.Value,
                    Tier = t.Tier,
                    Name = t.Trait.Name,
                    InGameKey = t.Trait.InGameKey,
                }).ToList(),
                Augments = ug.Augments.Select(a => new GuideAugmentDto
                {
                    InGameKey = a.Augment.InGameKey,
                    Name = a.Augment.Name,
                    Desc = a.Augment.Desc,
                    Tier = a.Augment.Tier
                }).ToList(),
                IsUpvote = null
            });
        }

        private static UserGuideDto MapUserGuideToDto(UserGuide ug)
        {
            return new UserGuideDto
            {
                Id = ug.Id,
                UserId = ug.UserId ?? 0,
                UsersUsername = ug.UsersUsername ?? "",
                Name = ug.Name,
                Stage2Desc = ug.Stage2Desc,
                Stage3Desc = ug.Stage3Desc,
                Stage4Desc = ug.Stage4Desc,
                GeneralDesc = ug.GeneralDesc,
                DifficultyLevel = ug.DifficultyLevel,
                PlayStyle = ug.PlayStyle,
                Hexes = ug.Hexes.Select(h => new HexDto
                {
                    Unit = new GuideUnitDto
                    {
                        InGameKey = h.Unit.InGameKey,
                        Name = h.Unit.Name,
                        Tier = h.Unit.Tier,
                        Cost = h.Unit.Cost,
                        Traits = h.Unit.Traits.Select(t => new PartialUnitTraitDto
                        {
                            Name = t.Trait.Name,
                            InGameKey = t.Trait.InGameKey,
                        }).ToList(),
                    },
                    CurrentItems = h.CurrentItems.Select(ci => new GuideItemDto
                    {
                        InGameKey = ci.Item.InGameKey,
                        Name = ci.Item.Name,
                        Recipe = ci.Item.Recipe,
                        Desc = ci.Item.Desc,
                        ShortDesc = ci.Item.ShortDesc,
                        FromDesc = ci.Item.FromDesc,
                    }).ToList(),
                    IsStarred = h.IsStarred,
                    Coordinates = h.Coordinates
                }).ToList(),
                Traits = ug.Traits.Select(t => new GuideTraitDto
                {
                    Value = t.Value,
                    Tier = t.Tier,
                    Name = t.Trait.Name,
                    InGameKey = t.Trait.InGameKey,
                    Tiers = t.Trait.Tiers.Select(tt => new TraitTierDto
                    {
                        Level = tt.Level,
                        Rarity = tt.Rarity,
                    }).ToList(),
                }).ToList(),
                Augments = ug.Augments.Select(a => new GuideAugmentDto
                {
                    InGameKey = a.Augment.InGameKey,
                    Name = a.Augment.Name,
                    Desc = a.Augment.Desc,
                    Tier = a.Augment.Tier
                }).ToList(),
            };
        }
    }
}
