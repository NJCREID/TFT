using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using TFT_API.Data;
using TFT_API.Interfaces;
using TFT_API.Models.AutoGeneratedGuide;
using TFT_API.Models.Unit;
using TFT_API.Models.User;
using TFT_API.Models.UserGuides;
using TFT_API.Models.Votes;

namespace TFT_API.Persistence
{
    public class GuideRepository : IGuideDataAccess
    {

        private readonly TFTContext _context;

        public GuideRepository(TFTContext context)
        {
            _context = context;
        }
        public UserGuide AddUserGuide(UserGuide userGuide)
        {
            _context.UserGuides.Add(userGuide);
            return Save(userGuide);
        }

        public List<UserGuide> GetUserGuides(string sortBy)
        {
            IQueryable<UserGuide> userGuidesQuery = _context.UserGuides.AsQueryable().AsNoTracking().AsSplitQuery().Where(ug => ug.IsDraft != true && ug.isAutoGenerated != true); ;
            switch (sortBy)
            {
                case "best":
                    userGuidesQuery = userGuidesQuery.OrderByDescending(ug => ug.UpVotes);
                    break;
                case "top":
                    userGuidesQuery = userGuidesQuery.OrderByDescending(ug => ug.Views);
                    break;
                case "new":
                    userGuidesQuery = userGuidesQuery.OrderByDescending(ug => ug.CreatedAt);
                    break;
            }
            return userGuidesQuery.Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .ToList(); 
        }

        public List<UserGuide> GetUserGuidesByUserId(int userId)
        {
            return _context.UserGuides.AsNoTracking()
                .AsSplitQuery()
                .Where(ug => ug.UserId == userId)
                .Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .ToList();
        }

        public List<UserGuide> GetCommentedUserGuides(int userId)
        {
            return _context.UserGuides.AsNoTracking()
                .AsSplitQuery()
                .Where(ug => ug.Comments.Any(comment => comment.UserId == userId) )
                .Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .ToList();
        }

        public List<UserGuide> GetUpvotedUserGuides(int userId)
        {
            return _context.UserGuides.AsNoTracking()
                .AsSplitQuery()
                .Where(ug => ug.Votes.Any(vote => vote.IsUpvote == true && vote.UserId == userId))
                .Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .ToList();
        }

        public List<UserGuide> GetDownvotedUserGuides(int userId)
        {
            return _context.UserGuides.AsNoTracking()
                .AsSplitQuery()
                .Where(ug => ug.Votes.Any(vote => vote.IsUpvote == false && vote.UserId == userId))
                .Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .ToList();
        }

        public UserGuide? GetUserGuideById(int id)
        {
            return _context.UserGuides
                .AsSplitQuery()
                .Where(ug => ug.Id == id)
                .Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .Include(u => u.Comments)
                .FirstOrDefault();
        }

        public UserGuide? UpdateUserGuide(UserGuide userGuide)
        {
            var currentUserGuide = GetUserGuideById(userGuide.Id);
            if (currentUserGuide != null)
            {
                _context.Entry(currentUserGuide).CurrentValues.SetValues(userGuide);
                return Save(userGuide);
            }
            return null;
        }
        public void DeleteUserGuide(int id)
        {
            var userGuide = _context.UserGuides.Find(id);
            if (userGuide != null)
            {
                _context.UserGuides.Remove(userGuide);
                _context.SaveChanges();
            }
        }

        public List<UserGuide> GetAutoGeneratedGuides()
        {
            return _context.UserGuides.AsNoTracking()
                .AsSplitQuery()
                .Where(u => u.isAutoGenerated == true)
                .Include(u => u.InitialUnit)
                .Include(u => u.Traits)
                    .ThenInclude(ut => ut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.Unit)
                        .ThenInclude(uhu => uhu.Traits)
                            .ThenInclude(uhut => uhut.Trait)
                .Include(u => u.Hexes)
                    .ThenInclude(uh => uh.CurrentItems)
                        .ThenInclude(uhc => uhc.Item)
                .Include(u => u.Augments)
                    .ThenInclude(uhc => uhc.Augment)
                .ToList();
        }

        public List<Vote> GetUserVotes(int userId)
        {
            return _context.Votes.AsNoTracking()
                .Where(v => v.UserId == userId).ToList();        
        }

        public UserGuide Save(UserGuide userGuide)
        {
            _context.SaveChanges();
            return userGuide;
        }

    }
}
